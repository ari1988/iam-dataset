{
  "api": {
    "CredentialExposure": [
      "appsync:ListApiKeys",
      "athena:GetSession",
      "codeartifact:GetAuthorizationToken",
      "codepipeline:PollForJobs",
      "cognito-identity:GetCredentialsForIdentity",
      "cognito-identity:GetOpenIdToken",
      "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
      "cognito-idp:DescribeUserPoolClient",
      "cognito-idp:GetUserAttributeVerificationCode",
      "connect:GetFederationToken",
      "connect:ListSecurityKeys",
      "ec2:GetPasswordData",
      "ec2-instance-connect:SendSSHPublicKey",
      "ecr-public:GetAuthorizationToken",
      "ecr:GetAuthorizationToken",
      "gamelift:GetComputeAuthToken",
      "gamelift:GetGameSessionLogUrl",
      "gamelift:GetInstanceAccess",
      "gamelift:RequestUploadCredentials",
      "iam:CreateAccessKey",
      "iam:CreateLoginProfile",
      "iam:CreateServiceSpecificCredential",
      "iam:ResetServiceSpecificCredential",
      "iam:UpdateAccessKey",
      "lightsail:DownloadDefaultKeyPair",
      "lightsail:GetBucketAccessKeys",
      "lightsail:GetKeyPair",
      "lightsail:GetKeyPairs",
      "lightsail:GetRelationalDatabaseMasterUserPassword",
      "mediapackage:RotateChannelCredentials",
      "mediapackage:RotateIngestEndpointCredentials",
      "redshift:GetClusterCredentials",
      "s3:GetDataAccess",
      "snowball:GetJobUnlockCode",
      "storagegateway:DescribeChapCredentials",
      "sts:AssumeRole",
      "sts:AssumeRoleWithSAML",
      "sts:AssumeRoleWithWebIdentity",
      "sts:GetFederationToken",
      "sts:GetSessionToken",
      "waf-regional:GetChangeToken",
      "waf:GetChangeToken"
    ],
    "DataAccess": [
      "appsync:GetDataSource",
      "appsync:GetFunction",
      "athena:GetQueryExecution",
      "athena:GetQueryResults",
      "cassandra:Select",
      "chatbot:DescribeSlackUserIdentities",
      "chatbot:ListMicrosoftTeamsConfiguredTeams",
      "chatbot:ListMicrosoftTeamsUserIdentities",
      "chime:GetAttendee",
      "chime:GetChannelMessage",
      "chime:GetMeeting",
      "chime:GetRoom",
      "chime:GetUser",
      "chime:GetUserSettings",
      "chime:ListAttendees",
      "chime:ListMeetings",
      "chime:ListUsers",
      "cleanrooms:GetProtectedQuery",
      "cloudformation:GetTemplate",
      "cloudfront:GetFunction",
      "cloudtrail:GetQueryResults",
      "cloudtrail:LookupEvents",
      "codeartifact:GetPackageVersionAsset",
      "codeartifact:GetPackageVersionReadme",
      "codebuild:BatchGetReportGroups",
      "codebuild:BatchGetReports",
      "codecommit:BatchGetCommits",
      "codecommit:BatchGetRepositories",
      "codecommit:DescribeMergeConflicts",
      "codecommit:DescribePullRequestEvents",
      "codecommit:GetApprovalRuleTemplate",
      "codecommit:GetBlob",
      "codecommit:GetBranch",
      "codecommit:GetComment",
      "codecommit:GetCommentReactions",
      "codecommit:GetCommentsForComparedCommit",
      "codecommit:GetCommentsForPullRequest",
      "codecommit:GetCommit",
      "codecommit:GetDifferences",
      "codecommit:GetFile",
      "codecommit:GetFolder",
      "codecommit:GetMergeCommit",
      "codecommit:GetMergeConflicts",
      "codecommit:GetMergeOptions",
      "codecommit:GetPullRequest",
      "codecommit:GetPullRequestApprovalStates",
      "codecommit:GetPullRequestOverrideState",
      "codeguru-profiler:GetRecommendations",
      "codeguru-reviewer:DescribeCodeReview",
      "codeguru-reviewer:DescribeRecommendationFeedback",
      "codepipeline:GetPipelineExecution",
      "cognito-identity:LookupDeveloperIdentity",
      "cognito-idp:AdminGetDevice",
      "cognito-idp:AdminGetUser",
      "cognito-idp:AdminListDevices",
      "cognito-idp:AdminListGroupsForUser",
      "cognito-idp:AdminListUserAuthEvents",
      "cognito-idp:GetDevice",
      "cognito-idp:GetGroup",
      "cognito-idp:GetUser",
      "cognito-idp:ListUsers",
      "cognito-idp:ListDevices",
      "cognito-idp:ListGroups",
      "cognito-sync:ListRecords",
      "connect:ListUsers",
      "datapipeline:QueryObjects",
      "dynamodb:BatchGetItem",
      "dynamodb:GetItem",
      "dynamodb:GetRecords",
      "dynamodb:Query",
      "dynamodb:Scan",
      "ecr:GetDownloadUrlForLayer",
      "gamelift:GetInstanceAccess",
      "kendra:Query",
      "kinesis:GetRecords",
      "kinesisvideo:GetImages",
      "kinesisvideo:GetMedia",
      "kms:CreateGrant",
      "lambda:GetFunction",
      "lambda:GetLayerVersion",
      "lightsail:GetContainerImages",
      "logs:GetLogEvents",
      "logs:GetLogRecord",
      "logs:GetQueryResults",
      "macie2:GetFindings",
      "mediastore:GetObject",
      "qldb:GetBlock",
      "rds:DownloadDBLogFilePortion",
      "robomaker:GetWorldTemplateBody",
      "s3:GetObject",
      "s3:GetObjectVersion",
      "sagemaker:Search",
      "sdb:Select",
      "serverlessrepo:GetApplication",
      "serverlessrepo:GetCloudFormationTemplate",
      "sqs:ReceiveMessage",
      "ssm:GetDocument",
      "ssm:GetParameter",
      "ssm:GetParameterHistory",
      "ssm:GetParameters",
      "ssm:GetParametersByPath",
      "support:DescribeAttachment",
      "support:DescribeCommunications",
      "wafv2:GetSampledRequests",
      "workdocs:GetDocument",
      "workdocs:GetDocumentPath",
      "workdocs:GetDocumentVersion",
      "workmail:ListGroupMembers",
      "workmail:ListGroups",
      "workmail:ListUsers"
    ],
    "PrivEsc": [
      "codestar:AssociateTeamMember",
      "codestar:CreateProject",
      "ec2-instance-connect:SendSSHPublicKey",
      "glue:UpdateDevEndpoint",
      "iam:AddUserToGroup",
      "iam:AttachGroupPolicy",
      "iam:AttachRolePolicy",
      "iam:AttachUserPolicy",
      "iam:CreateAccessKey",
      "iam:CreateLoginProfile",
      "iam:CreatePolicyVersion",
      "iam:CreateServiceLinkedRole",
      "iam:CreateVirtualMFADevice",
      "iam:DeleteRolePermissionsBoundary",
      "iam:DeleteUserPermissionsBoundary",
      "iam:EnableMFADevice",
      "iam:PassRole",
      "iam:PutGroupPolicy",
      "iam:PutRolePermissionsBoundary",
      "iam:PutRolePolicy",
      "iam:PutUserPermissionsBoundary",
      "iam:PutUserPolicy",
      "iam:ResyncMFADevice",
      "iam:SetDefaultPolicyVersion",
      "iam:UpdateAssumeRolePolicy",
      "iam:UpdateLoginProfile",
      "kms:CreateGrant"
    ],
    "ResourceExposure": [
      "acm-pca:CreatePermission",
      "acm-pca:DeletePermission",
      "acm-pca:DeletePolicy",
      "acm-pca:PutPolicy",
      "backup:DeleteBackupVaultAccessPolicy",
      "backup:PutBackupVaultAccessPolicy",
      "chime:DeleteVoiceConnectorTerminationCredentials",
      "chime:PutVoiceConnectorTerminationCredentials",
      "cloudformation:SetStackPolicy",
      "cloudsearch:UpdateServiceAccessPolicies",
      "codeartifact:DeleteDomainPermissionsPolicy",
      "codeartifact:DeleteRepositoryPermissionsPolicy",
      "codebuild:DeleteResourcePolicy",
      "codebuild:DeleteSourceCredentials",
      "codebuild:ImportSourceCredentials",
      "codebuild:PutResourcePolicy",
      "codeguru-profiler:PutPermission",
      "codeguru-profiler:RemovePermission",
      "codestar:AssociateTeamMember",
      "codestar:CreateProject",
      "codestar:DeleteProject",
      "codestar:DisassociateTeamMember",
      "codestar:UpdateTeamMember",
      "cognito-identity:CreateIdentityPool",
      "cognito-identity:DeleteIdentities",
      "cognito-identity:DeleteIdentityPool",
      "cognito-identity:GetId",
      "cognito-identity:MergeDeveloperIdentities",
      "cognito-identity:SetIdentityPoolRoles",
      "cognito-identity:UnlinkDeveloperIdentity",
      "cognito-identity:UnlinkIdentity",
      "cognito-identity:UpdateIdentityPool",
      "ds:CreateConditionalForwarder",
      "ds:CreateDirectory",
      "ds:CreateMicrosoftAD",
      "ds:CreateTrust",
      "ds:ShareDirectory",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DisableImageBlockPublicAccess",
      "ec2:ModifySnapshotAttribute",
      "ec2:ModifyVpcEndpointServicePermissions",
      "ec2:ResetSnapshotAttribute",
      "ecr:DeleteRepositoryPolicy",
      "ecr:SetRepositoryPolicy",
      "elasticfilesystem:DeleteFileSystemPolicy",
      "elasticfilesystem:PutFileSystemPolicy",
      "elasticmapreduce:PutBlockPublicAccessConfiguration",
      "es:CreateElasticsearchDomain",
      "es:UpdateElasticsearchDomainConfig",
      "glacier:AbortVaultLock",
      "glacier:CompleteVaultLock",
      "glacier:DeleteVaultAccessPolicy",
      "glacier:InitiateVaultLock",
      "glacier:SetDataRetrievalPolicy",
      "glacier:SetVaultAccessPolicy",
      "glue:DeleteResourcePolicy",
      "glue:PutResourcePolicy",
      "greengrass:AssociateServiceRoleToAccount",
      "health:DisableHealthServiceAccessForOrganization",
      "health:EnableHealthServiceAccessForOrganization",
      "iam:AddClientIDToOpenIDConnectProvider",
      "iam:AddRoleToInstanceProfile",
      "iam:AddUserToGroup",
      "iam:AttachGroupPolicy",
      "iam:AttachRolePolicy",
      "iam:AttachUserPolicy",
      "iam:ChangePassword",
      "iam:CreateAccessKey",
      "iam:CreateAccountAlias",
      "iam:CreateGroup",
      "iam:CreateInstanceProfile",
      "iam:CreateLoginProfile",
      "iam:CreateOpenIDConnectProvider",
      "iam:CreatePolicy",
      "iam:CreatePolicyVersion",
      "iam:CreateRole",
      "iam:CreateSAMLProvider",
      "iam:CreateServiceLinkedRole",
      "iam:CreateServiceSpecificCredential",
      "iam:CreateUser",
      "iam:CreateVirtualMFADevice",
      "iam:DeactivateMFADevice",
      "iam:DeleteAccessKey",
      "iam:DeleteAccountAlias",
      "iam:DeleteAccountPasswordPolicy",
      "iam:DeleteGroup",
      "iam:DeleteGroupPolicy",
      "iam:DeleteInstanceProfile",
      "iam:DeleteLoginProfile",
      "iam:DeleteOpenIDConnectProvider",
      "iam:DeletePolicy",
      "iam:DeletePolicyVersion",
      "iam:DeleteRole",
      "iam:DeleteRolePermissionsBoundary",
      "iam:DeleteRolePolicy",
      "iam:DeleteSAMLProvider",
      "iam:DeleteServerCertificate",
      "iam:DeleteServiceLinkedRole",
      "iam:DeleteServiceSpecificCredential",
      "iam:DeleteSigningCertificate",
      "iam:DeleteSSHPublicKey",
      "iam:DeleteUser",
      "iam:DeleteUserPermissionsBoundary",
      "iam:DeleteUserPolicy",
      "iam:DeleteVirtualMFADevice",
      "iam:DetachGroupPolicy",
      "iam:DetachRolePolicy",
      "iam:DetachUserPolicy",
      "iam:EnableMFADevice",
      "iam:PassRole",
      "iam:PutGroupPolicy",
      "iam:PutRolePermissionsBoundary",
      "iam:PutRolePolicy",
      "iam:PutUserPermissionsBoundary",
      "iam:PutUserPolicy",
      "iam:RemoveClientIDFromOpenIDConnectProvider",
      "iam:RemoveRoleFromInstanceProfile",
      "iam:RemoveUserFromGroup",
      "iam:ResetServiceSpecificCredential",
      "iam:ResyncMFADevice",
      "iam:SetDefaultPolicyVersion",
      "iam:SetSecurityTokenServicePreferences",
      "iam:UpdateAccessKey",
      "iam:UpdateAccountPasswordPolicy",
      "iam:UpdateAssumeRolePolicy",
      "iam:UpdateGroup",
      "iam:UpdateLoginProfile",
      "iam:UpdateOpenIDConnectProviderThumbprint",
      "iam:UpdateRole",
      "iam:UpdateRoleDescription",
      "iam:UpdateSAMLProvider",
      "iam:UpdateServerCertificate",
      "iam:UpdateServiceSpecificCredential",
      "iam:UpdateSigningCertificate",
      "iam:UpdateSSHPublicKey",
      "iam:UpdateUser",
      "iam:UploadServerCertificate",
      "iam:UploadSigningCertificate",
      "iam:UploadSSHPublicKey",
      "imagebuilder:PutComponentPolicy",
      "imagebuilder:PutImagePolicy",
      "imagebuilder:PutImageRecipePolicy",
      "iot:AttachPolicy",
      "iot:AttachPrincipalPolicy",
      "iot:DetachPolicy",
      "iot:DetachPrincipalPolicy",
      "iot:SetDefaultAuthorizer",
      "iot:SetDefaultPolicyVersion",
      "iotsitewise:CreateAccessPolicy",
      "iotsitewise:DeleteAccessPolicy",
      "iotsitewise:UpdateAccessPolicy",
      "kms:CreateGrant",
      "kms:PutKeyPolicy",
      "kms:RetireGrant",
      "kms:RevokeGrant",
      "lakeformation:BatchGrantPermissions",
      "lakeformation:BatchRevokePermissions",
      "lakeformation:GrantPermissions",
      "lakeformation:PutDataLakeSettings",
      "lakeformation:RevokePermissions",
      "lambda:AddLayerVersionPermission",
      "lambda:AddPermission",
      "lambda:RemoveLayerVersionPermission",
      "lambda:RemovePermission",
      "license-manager:UpdateServiceSettings",
      "lightsail:GetRelationalDatabaseMasterUserPassword",
      "logs:DeleteResourcePolicy",
      "logs:PutResourcePolicy",
      "mediapackage:RotateIngestEndpointCredentials",
      "mediastore:DeleteContainerPolicy",
      "mediastore:PutContainerPolicy",
      "opsworks:SetPermission",
      "opsworks:UpdateUserProfile",
      "quicksight:CreateGroup",
      "quicksight:CreateGroupMembership",
      "quicksight:CreateIAMPolicyAssignment",
      "quicksight:DeleteGroup",
      "quicksight:DeleteGroupMembership",
      "quicksight:DeleteIAMPolicyAssignment",
      "quicksight:DeleteUser",
      "quicksight:DeleteUserByPrincipalId",
      "quicksight:RegisterUser",
      "quicksight:UpdateDashboardPermissions",
      "quicksight:UpdateGroup",
      "quicksight:UpdateIAMPolicyAssignment",
      "quicksight:UpdateTemplatePermissions",
      "quicksight:UpdateUser",
      "ram:AcceptResourceShareInvitation",
      "ram:AssociateResourceShare",
      "ram:CreateResourceShare",
      "ram:DeleteResourceShare",
      "ram:DisassociateResourceShare",
      "ram:EnableSharingWithAwsOrganization",
      "ram:RejectResourceShareInvitation",
      "ram:UpdateResourceShare",
      "rds:AuthorizeDBSecurityGroupIngress",
      "redshift:AuthorizeSnapshotAccess",
      "redshift:CreateSnapshotCopyGrant",
      "redshift:ModifyClusterIamRoles",
      "redshift:RevokeSnapshotAccess",
      "route53resolver:PutResolverRulePolicy",
      "s3:DeleteBucketPolicy",
      "s3:PutAccessPointPolicy",
      "s3:PutAccountPublicAccessBlock",
      "s3:PutBucketAcl",
      "s3:PutBucketPolicy",
      "s3:PutBucketPublicAccessBlock",
      "s3:PutObjectAcl",
      "secretsmanager:DeleteResourcePolicy",
      "secretsmanager:PutResourcePolicy",
      "secretsmanager:ValidateResourcePolicy",
      "servicecatalog:CreatePortfolioShare",
      "servicecatalog:DeletePortfolioShare",
      "sns:AddPermission",
      "sns:CreateTopic",
      "sns:RemovePermission",
      "sns:SetTopicAttributes",
      "sqs:AddPermission",
      "sqs:CreateQueue",
      "sqs:RemovePermission",
      "sqs:SetQueueAttributes",
      "ssm:ModifyDocumentPermission",
      "sso:CreatePermissionSet",
      "sso:DeletePermissionSet",
      "sso:UpdatePermissionSet",
      "storagegateway:DeleteChapCredentials",
      "storagegateway:SetLocalConsolePassword",
      "storagegateway:SetSMBGuestPassword",
      "storagegateway:UpdateChapCredentials",
      "waf-regional:DeletePermissionPolicy",
      "waf-regional:PutPermissionPolicy",
      "waf:DeletePermissionPolicy",
      "waf:PutPermissionPolicy",
      "wafv2:CreateWebACL",
      "wafv2:DeletePermissionPolicy",
      "wafv2:DeleteWebACL",
      "wafv2:PutPermissionPolicy",
      "wafv2:UpdateWebACL",
      "worklink:UpdateDevicePolicyConfiguration",
      "workmail:ResetPassword",
      "xray:PutEncryptionConfig"
    ]
  },
  "api_lower": {
    "CredentialExposure": [
      "appsync:listapikeys",
      "athena:getsession",
      "codeartifact:getauthorizationtoken",
      "codepipeline:pollforjobs",
      "cognito-identity:getcredentialsforidentity",
      "cognito-identity:getopenidtoken",
      "cognito-identity:getopenidtokenfordeveloperidentity",
      "cognito-idp:describeuserpoolclient",
      "cognito-idp:getuserattributeverificationcode",
      "connect:getfederationtoken",
      "connect:listsecuritykeys",
      "ec2:getpassworddata",
      "ec2-instance-connect:sendsshpublickey",
      "ecr-public:getauthorizationtoken",
      "ecr:getauthorizationtoken",
      "gamelift:getcomputeauthtoken",
      "gamelift:getgamesessionlogurl",
      "gamelift:getinstanceaccess",
      "gamelift:requestuploadcredentials",
      "iam:createaccesskey",
      "iam:createloginprofile",
      "iam:createservicespecificcredential",
      "iam:resetservicespecificcredential",
      "iam:updateaccesskey",
      "lightsail:downloaddefaultkeypair",
      "lightsail:getbucketaccesskeys",
      "lightsail:getkeypair",
      "lightsail:getkeypairs",
      "lightsail:getrelationaldatabasemasteruserpassword",
      "mediapackage:rotatechannelcredentials",
      "mediapackage:rotateingestendpointcredentials",
      "redshift:getclustercredentials",
      "s3:getdataaccess",
      "snowball:getjobunlockcode",
      "storagegateway:describechapcredentials",
      "sts:assumerole",
      "sts:assumerolewithsaml",
      "sts:assumerolewithwebidentity",
      "sts:getfederationtoken",
      "sts:getsessiontoken",
      "waf-regional:getchangetoken",
      "waf:getchangetoken"
    ],
    "DataAccess": [
      "appsync:getdatasource",
      "appsync:getfunction",
      "athena:getqueryexecution",
      "athena:getqueryresults",
      "cassandra:select",
      "chatbot:describeslackuseridentities",
      "chatbot:listmicrosoftteamsconfiguredteams",
      "chatbot:listmicrosoftteamsuseridentities",
      "chime:getattendee",
      "chime:getchannelmessage",
      "chime:getmeeting",
      "chime:getroom",
      "chime:getuser",
      "chime:getusersettings",
      "chime:listattendees",
      "chime:listmeetings",
      "chime:listusers",
      "cleanrooms:getprotectedquery",
      "cloudformation:gettemplate",
      "cloudfront:getfunction",
      "cloudtrail:getqueryresults",
      "cloudtrail:lookupevents",
      "codeartifact:getpackageversionasset",
      "codeartifact:getpackageversionreadme",
      "codebuild:batchgetreportgroups",
      "codebuild:batchgetreports",
      "codecommit:batchgetcommits",
      "codecommit:batchgetrepositories",
      "codecommit:describemergeconflicts",
      "codecommit:describepullrequestevents",
      "codecommit:getapprovalruletemplate",
      "codecommit:getblob",
      "codecommit:getbranch",
      "codecommit:getcomment",
      "codecommit:getcommentreactions",
      "codecommit:getcommentsforcomparedcommit",
      "codecommit:getcommentsforpullrequest",
      "codecommit:getcommit",
      "codecommit:getdifferences",
      "codecommit:getfile",
      "codecommit:getfolder",
      "codecommit:getmergecommit",
      "codecommit:getmergeconflicts",
      "codecommit:getmergeoptions",
      "codecommit:getpullrequest",
      "codecommit:getpullrequestapprovalstates",
      "codecommit:getpullrequestoverridestate",
      "codeguru-profiler:getrecommendations",
      "codeguru-reviewer:describecodereview",
      "codeguru-reviewer:describerecommendationfeedback",
      "codepipeline:getpipelineexecution",
      "cognito-identity:lookupdeveloperidentity",
      "cognito-idp:admingetdevice",
      "cognito-idp:admingetuser",
      "cognito-idp:adminlistdevices",
      "cognito-idp:adminlistgroupsforuser",
      "cognito-idp:adminlistuserauthevents",
      "cognito-idp:getdevice",
      "cognito-idp:getgroup",
      "cognito-idp:getuser",
      "cognito-idp:listusers",
      "cognito-idp:listdevices",
      "cognito-idp:listgroups",
      "cognito-sync:listrecords",
      "connect:listusers",
      "datapipeline:queryobjects",
      "dynamodb:batchgetitem",
      "dynamodb:getitem",
      "dynamodb:getrecords",
      "dynamodb:query",
      "dynamodb:scan",
      "ecr:getdownloadurlforlayer",
      "gamelift:getinstanceaccess",
      "kendra:query",
      "kinesis:getrecords",
      "kinesisvideo:getimages",
      "kinesisvideo:getmedia",
      "kms:creategrant",
      "lambda:getfunction",
      "lambda:getlayerversion",
      "lightsail:getcontainerimages",
      "logs:getlogevents",
      "logs:getlogrecord",
      "logs:getqueryresults",
      "macie2:getfindings",
      "mediastore:getobject",
      "qldb:getblock",
      "rds:downloaddblogfileportion",
      "robomaker:getworldtemplatebody",
      "s3:getobject",
      "s3:getobjectversion",
      "sagemaker:search",
      "sdb:select",
      "serverlessrepo:getapplication",
      "serverlessrepo:getcloudformationtemplate",
      "sqs:receivemessage",
      "ssm:getdocument",
      "ssm:getparameter",
      "ssm:getparameterhistory",
      "ssm:getparameters",
      "ssm:getparametersbypath",
      "support:describeattachment",
      "support:describecommunications",
      "wafv2:getsampledrequests",
      "workdocs:getdocument",
      "workdocs:getdocumentpath",
      "workdocs:getdocumentversion",
      "workmail:listgroupmembers",
      "workmail:listgroups",
      "workmail:listusers"
    ],
    "PrivEsc": [
      "codestar:associateteammember",
      "codestar:createproject",
      "ec2-instance-connect:sendsshpublickey",
      "glue:updatedevendpoint",
      "iam:addusertogroup",
      "iam:attachgrouppolicy",
      "iam:attachrolepolicy",
      "iam:attachuserpolicy",
      "iam:createaccesskey",
      "iam:createloginprofile",
      "iam:createpolicyversion",
      "iam:createservicelinkedrole",
      "iam:createvirtualmfadevice",
      "iam:deleterolepermissionsboundary",
      "iam:deleteuserpermissionsboundary",
      "iam:enablemfadevice",
      "iam:passrole",
      "iam:putgrouppolicy",
      "iam:putrolepermissionsboundary",
      "iam:putrolepolicy",
      "iam:putuserpermissionsboundary",
      "iam:putuserpolicy",
      "iam:resyncmfadevice",
      "iam:setdefaultpolicyversion",
      "iam:updateassumerolepolicy",
      "iam:updateloginprofile",
      "kms:creategrant"
    ],
    "ResourceExposure": [
      "acm-pca:createpermission",
      "acm-pca:deletepermission",
      "acm-pca:deletepolicy",
      "acm-pca:putpolicy",
      "backup:deletebackupvaultaccesspolicy",
      "backup:putbackupvaultaccesspolicy",
      "chime:deletevoiceconnectorterminationcredentials",
      "chime:putvoiceconnectorterminationcredentials",
      "cloudformation:setstackpolicy",
      "cloudsearch:updateserviceaccesspolicies",
      "codeartifact:deletedomainpermissionspolicy",
      "codeartifact:deleterepositorypermissionspolicy",
      "codebuild:deleteresourcepolicy",
      "codebuild:deletesourcecredentials",
      "codebuild:importsourcecredentials",
      "codebuild:putresourcepolicy",
      "codeguru-profiler:putpermission",
      "codeguru-profiler:removepermission",
      "codestar:associateteammember",
      "codestar:createproject",
      "codestar:deleteproject",
      "codestar:disassociateteammember",
      "codestar:updateteammember",
      "cognito-identity:createidentitypool",
      "cognito-identity:deleteidentities",
      "cognito-identity:deleteidentitypool",
      "cognito-identity:getid",
      "cognito-identity:mergedeveloperidentities",
      "cognito-identity:setidentitypoolroles",
      "cognito-identity:unlinkdeveloperidentity",
      "cognito-identity:unlinkidentity",
      "cognito-identity:updateidentitypool",
      "ds:createconditionalforwarder",
      "ds:createdirectory",
      "ds:createmicrosoftad",
      "ds:createtrust",
      "ds:sharedirectory",
      "ec2:createnetworkinterfacepermission",
      "ec2:deletenetworkinterfacepermission",
      "ec2:disableimageblockpublicaccess",
      "ec2:modifysnapshotattribute",
      "ec2:modifyvpcendpointservicepermissions",
      "ec2:resetsnapshotattribute",
      "ecr:deleterepositorypolicy",
      "ecr:setrepositorypolicy",
      "elasticfilesystem:deletefilesystempolicy",
      "elasticfilesystem:putfilesystempolicy",
      "elasticmapreduce:putblockpublicaccessconfiguration",
      "es:createelasticsearchdomain",
      "es:updateelasticsearchdomainconfig",
      "glacier:abortvaultlock",
      "glacier:completevaultlock",
      "glacier:deletevaultaccesspolicy",
      "glacier:initiatevaultlock",
      "glacier:setdataretrievalpolicy",
      "glacier:setvaultaccesspolicy",
      "glue:deleteresourcepolicy",
      "glue:putresourcepolicy",
      "greengrass:associateserviceroletoaccount",
      "health:disablehealthserviceaccessfororganization",
      "health:enablehealthserviceaccessfororganization",
      "iam:addclientidtoopenidconnectprovider",
      "iam:addroletoinstanceprofile",
      "iam:addusertogroup",
      "iam:attachgrouppolicy",
      "iam:attachrolepolicy",
      "iam:attachuserpolicy",
      "iam:changepassword",
      "iam:createaccesskey",
      "iam:createaccountalias",
      "iam:creategroup",
      "iam:createinstanceprofile",
      "iam:createloginprofile",
      "iam:createopenidconnectprovider",
      "iam:createpolicy",
      "iam:createpolicyversion",
      "iam:createrole",
      "iam:createsamlprovider",
      "iam:createservicelinkedrole",
      "iam:createservicespecificcredential",
      "iam:createuser",
      "iam:createvirtualmfadevice",
      "iam:deactivatemfadevice",
      "iam:deleteaccesskey",
      "iam:deleteaccountalias",
      "iam:deleteaccountpasswordpolicy",
      "iam:deletegroup",
      "iam:deletegrouppolicy",
      "iam:deleteinstanceprofile",
      "iam:deleteloginprofile",
      "iam:deleteopenidconnectprovider",
      "iam:deletepolicy",
      "iam:deletepolicyversion",
      "iam:deleterole",
      "iam:deleterolepermissionsboundary",
      "iam:deleterolepolicy",
      "iam:deletesamlprovider",
      "iam:deleteservercertificate",
      "iam:deleteservicelinkedrole",
      "iam:deleteservicespecificcredential",
      "iam:deletesigningcertificate",
      "iam:deletesshpublickey",
      "iam:deleteuser",
      "iam:deleteuserpermissionsboundary",
      "iam:deleteuserpolicy",
      "iam:deletevirtualmfadevice",
      "iam:detachgrouppolicy",
      "iam:detachrolepolicy",
      "iam:detachuserpolicy",
      "iam:enablemfadevice",
      "iam:passrole",
      "iam:putgrouppolicy",
      "iam:putrolepermissionsboundary",
      "iam:putrolepolicy",
      "iam:putuserpermissionsboundary",
      "iam:putuserpolicy",
      "iam:removeclientidfromopenidconnectprovider",
      "iam:removerolefrominstanceprofile",
      "iam:removeuserfromgroup",
      "iam:resetservicespecificcredential",
      "iam:resyncmfadevice",
      "iam:setdefaultpolicyversion",
      "iam:setsecuritytokenservicepreferences",
      "iam:updateaccesskey",
      "iam:updateaccountpasswordpolicy",
      "iam:updateassumerolepolicy",
      "iam:updategroup",
      "iam:updateloginprofile",
      "iam:updateopenidconnectproviderthumbprint",
      "iam:updaterole",
      "iam:updateroledescription",
      "iam:updatesamlprovider",
      "iam:updateservercertificate",
      "iam:updateservicespecificcredential",
      "iam:updatesigningcertificate",
      "iam:updatesshpublickey",
      "iam:updateuser",
      "iam:uploadservercertificate",
      "iam:uploadsigningcertificate",
      "iam:uploadsshpublickey",
      "imagebuilder:putcomponentpolicy",
      "imagebuilder:putimagepolicy",
      "imagebuilder:putimagerecipepolicy",
      "iot:attachpolicy",
      "iot:attachprincipalpolicy",
      "iot:detachpolicy",
      "iot:detachprincipalpolicy",
      "iot:setdefaultauthorizer",
      "iot:setdefaultpolicyversion",
      "iotsitewise:createaccesspolicy",
      "iotsitewise:deleteaccesspolicy",
      "iotsitewise:updateaccesspolicy",
      "kms:creategrant",
      "kms:putkeypolicy",
      "kms:retiregrant",
      "kms:revokegrant",
      "lakeformation:batchgrantpermissions",
      "lakeformation:batchrevokepermissions",
      "lakeformation:grantpermissions",
      "lakeformation:putdatalakesettings",
      "lakeformation:revokepermissions",
      "lambda:addlayerversionpermission",
      "lambda:addpermission",
      "lambda:removelayerversionpermission",
      "lambda:removepermission",
      "license-manager:updateservicesettings",
      "lightsail:getrelationaldatabasemasteruserpassword",
      "logs:deleteresourcepolicy",
      "logs:putresourcepolicy",
      "mediapackage:rotateingestendpointcredentials",
      "mediastore:deletecontainerpolicy",
      "mediastore:putcontainerpolicy",
      "opsworks:setpermission",
      "opsworks:updateuserprofile",
      "quicksight:creategroup",
      "quicksight:creategroupmembership",
      "quicksight:createiampolicyassignment",
      "quicksight:deletegroup",
      "quicksight:deletegroupmembership",
      "quicksight:deleteiampolicyassignment",
      "quicksight:deleteuser",
      "quicksight:deleteuserbyprincipalid",
      "quicksight:registeruser",
      "quicksight:updatedashboardpermissions",
      "quicksight:updategroup",
      "quicksight:updateiampolicyassignment",
      "quicksight:updatetemplatepermissions",
      "quicksight:updateuser",
      "ram:acceptresourceshareinvitation",
      "ram:associateresourceshare",
      "ram:createresourceshare",
      "ram:deleteresourceshare",
      "ram:disassociateresourceshare",
      "ram:enablesharingwithawsorganization",
      "ram:rejectresourceshareinvitation",
      "ram:updateresourceshare",
      "rds:authorizedbsecuritygroupingress",
      "redshift:authorizesnapshotaccess",
      "redshift:createsnapshotcopygrant",
      "redshift:modifyclusteriamroles",
      "redshift:revokesnapshotaccess",
      "route53resolver:putresolverrulepolicy",
      "s3:deletebucketpolicy",
      "s3:putaccesspointpolicy",
      "s3:putaccountpublicaccessblock",
      "s3:putbucketacl",
      "s3:putbucketpolicy",
      "s3:putbucketpublicaccessblock",
      "s3:putobjectacl",
      "secretsmanager:deleteresourcepolicy",
      "secretsmanager:putresourcepolicy",
      "secretsmanager:validateresourcepolicy",
      "servicecatalog:createportfolioshare",
      "servicecatalog:deleteportfolioshare",
      "sns:addpermission",
      "sns:createtopic",
      "sns:removepermission",
      "sns:settopicattributes",
      "sqs:addpermission",
      "sqs:createqueue",
      "sqs:removepermission",
      "sqs:setqueueattributes",
      "ssm:modifydocumentpermission",
      "sso:createpermissionset",
      "sso:deletepermissionset",
      "sso:updatepermissionset",
      "storagegateway:deletechapcredentials",
      "storagegateway:setlocalconsolepassword",
      "storagegateway:setsmbguestpassword",
      "storagegateway:updatechapcredentials",
      "waf-regional:deletepermissionpolicy",
      "waf-regional:putpermissionpolicy",
      "waf:deletepermissionpolicy",
      "waf:putpermissionpolicy",
      "wafv2:createwebacl",
      "wafv2:deletepermissionpolicy",
      "wafv2:deletewebacl",
      "wafv2:putpermissionpolicy",
      "wafv2:updatewebacl",
      "worklink:updatedevicepolicyconfiguration",
      "workmail:resetpassword",
      "xray:putencryptionconfig"
    ]
  },
  "iam": {
    "CredentialExposure": [
      "appsync:ListApiKeys",
      "athena:GetSession",
      "chatbot:GetMicrosoftTeamsOauthParameters",
      "chatbot:GetSlackOauthParameters",
      "chime:CreateApiKey",
      "cloud9:CreateEnvironmentSSH",
      "cloud9:CreateEnvironmentToken",
      "codeartifact:GetAuthorizationToken",
      "codepipeline:PollForJobs",
      "cognito-identity:GetCredentialsForIdentity",
      "cognito-identity:GetOpenIdToken",
      "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
      "cognito-idp:DescribeUserPoolClient",
      "cognito-idp:GetUserAttributeVerificationCode",
      "connect:GetFederationToken",
      "connect:ListSecurityKeys",
      "ec2:GetPasswordData",
      "ec2-instance-connect:SendSSHPublicKey",
      "ecr-public:GetAuthorizationToken",
      "ecr:GetAuthorizationToken",
      "gamelift:GetComputeAuthToken",
      "gamelift:GetGameSessionLogUrl",
      "gamelift:GetInstanceAccess",
      "gamelift:RequestUploadCredentials",
      "iam:CreateAccessKey",
      "iam:CreateLoginProfile",
      "iam:CreateServiceSpecificCredential",
      "iam:ResetServiceSpecificCredential",
      "iam:UpdateAccessKey",
      "lightsail:DownloadDefaultKeyPair",
      "lightsail:GetBucketAccessKeys",
      "lightsail:GetKeyPair",
      "lightsail:GetKeyPairs",
      "lightsail:GetRelationalDatabaseMasterUserPassword",
      "mediapackage:RotateChannelCredentials",
      "mediapackage:RotateIngestEndpointCredentials",
      "rds-db:connect",
      "redshift:GetClusterCredentials",
      "s3:GetDataAccess",
      "snowball:GetJobUnlockCode",
      "sso-directory:ListBearerTokens",
      "storagegateway:DescribeChapCredentials",
      "sts:AssumeRole",
      "sts:AssumeRoleWithSAML",
      "sts:AssumeRoleWithWebIdentity",
      "sts:GetFederationToken",
      "sts:GetSessionToken",
      "waf-regional:GetChangeToken",
      "waf:GetChangeToken"
    ],
    "DataAccess": [
      "aoss:APIAccessAll",
      "aoss:DashboardsAccessAll",
      "appsync:GetDataSource",
      "appsync:GetFunction",
      "athena:GetQueryExecution",
      "athena:GetQueryResults",
      "athena:GetQueryResultsStream",
      "cassandra:Select",
      "chatbot:DescribeSlackChannels",
      "chatbot:DescribeSlackUserIdentities",
      "chatbot:ListMicrosoftTeamsConfiguredTeams",
      "chatbot:ListMicrosoftTeamsUserIdentities",
      "chime:GetAttendee",
      "chime:GetChannelMessage",
      "chime:GetMeeting",
      "chime:GetMeetingDetail",
      "chime:GetRoom",
      "chime:GetUser",
      "chime:GetUserActivityReportData",
      "chime:GetUserByEmail",
      "chime:GetUserSettings",
      "chime:ListAttendees",
      "chime:ListMeetingEvents",
      "chime:ListMeetings",
      "chime:ListUsers",
      "cleanrooms:GetProtectedQuery",
      "cloudformation:GetTemplate",
      "cloudfront:GetFunction",
      "cloudtrail:GetQueryResults",
      "cloudtrail:LookupEvents",
      "codeartifact:GetPackageVersionAsset",
      "codeartifact:GetPackageVersionReadme",
      "codeartifact:ReadFromRepository",
      "codebuild:BatchGetReportGroups",
      "codebuild:BatchGetReports",
      "codecommit:BatchGetCommits",
      "codecommit:BatchGetPullRequests",
      "codecommit:BatchGetRepositories",
      "codecommit:DescribeMergeConflicts",
      "codecommit:DescribePullRequestEvents",
      "codecommit:GetApprovalRuleTemplate",
      "codecommit:GetBlob",
      "codecommit:GetBranch",
      "codecommit:GetComment",
      "codecommit:GetCommentReactions",
      "codecommit:GetCommentsForComparedCommit",
      "codecommit:GetCommentsForPullRequest",
      "codecommit:GetCommit",
      "codecommit:GetCommitHistory",
      "codecommit:GetCommitsFromMergeBase",
      "codecommit:GetDifferences",
      "codecommit:GetFile",
      "codecommit:GetFolder",
      "codecommit:GetMergeCommit",
      "codecommit:GetMergeConflicts",
      "codecommit:GetMergeOptions",
      "codecommit:GetObjectIdentifier",
      "codecommit:GetPullRequest",
      "codecommit:GetPullRequestApprovalStates",
      "codecommit:GetPullRequestOverrideState",
      "codecommit:GetReferences",
      "codecommit:GetTree",
      "codecommit:GitPull",
      "codeguru-profiler:GetRecommendations",
      "codeguru-reviewer:DescribeCodeReview",
      "codeguru-reviewer:DescribeRecommendationFeedback",
      "codepipeline:GetPipelineExecution",
      "cognito-identity:LookupDeveloperIdentity",
      "cognito-idp:AdminGetDevice",
      "cognito-idp:AdminGetUser",
      "cognito-idp:AdminListDevices",
      "cognito-idp:AdminListGroupsForUser",
      "cognito-idp:AdminListUserAuthEvents",
      "cognito-idp:GetDevice",
      "cognito-idp:GetGroup",
      "cognito-idp:GetUser",
      "cognito-idp:ListUsers",
      "cognito-idp:ListDevices",
      "cognito-idp:ListGroups",
      "cognito-sync:ListRecords",
      "cognito-sync:QueryRecords",
      "connect:ListUsers",
      "datapipeline:QueryObjects",
      "dax:BatchGetItem",
      "dax:GetItem",
      "dax:Query",
      "dax:Scan",
      "dynamodb:BatchGetItem",
      "dynamodb:GetItem",
      "dynamodb:GetRecords",
      "dynamodb:Query",
      "dynamodb:Scan",
      "ecr:GetDownloadUrlForLayer",
      "es:ESHttpDelete",
      "es:ESHttpGet",
      "es:ESHttpHead",
      "es:ESHttpPatch",
      "es:ESHttpPost",
      "es:ESHttpPut",
      "gamelift:GetInstanceAccess",
      "healthlake:ReadResource",
      "healthlake:SearchWithGet",
      "healthlake:SearchWithPost",
      "kendra:Query",
      "kinesis:GetRecords",
      "kinesisvideo:GetImages",
      "kinesisvideo:GetMedia",
      "kms:CreateGrant",
      "lambda:GetFunction",
      "lambda:GetLayerVersion",
      "lightsail:GetContainerImages",
      "logs:GetLogEvents",
      "logs:GetLogRecord",
      "logs:GetQueryResults",
      "logs:Unmask",
      "macie2:GetFindings",
      "mediastore:GetObject",
      "qldb:GetBlock",
      "rds:DownloadCompleteDBLogFile",
      "rds:DownloadDBLogFilePortion",
      "robomaker:GetWorldTemplateBody",
      "s3-object-lambda:GetObject",
      "s3-object-lambda:GetObjectVersion",
      "s3-object-lambda:ListBucket",
      "s3:GetObject",
      "s3:GetObjectVersion",
      "sagemaker:Search",
      "sdb:Select",
      "serverlessrepo:GetApplication",
      "serverlessrepo:GetCloudFormationTemplate",
      "sqs:ReceiveMessage",
      "ssm:GetDocument",
      "ssm:GetParameter",
      "ssm:GetParameterHistory",
      "ssm:GetParameters",
      "ssm:GetParametersByPath",
      "sso-directory:DescribeGroup",
      "sso-directory:DescribeUser",
      "sso-directory:SearchGroups",
      "sso-directory:SearchUsers",
      "sso:SearchGroups",
      "sso:SearchUsers",
      "support:DescribeAttachment",
      "support:DescribeCommunications",
      "wafv2:GetSampledRequests",
      "workdocs:GetDocument",
      "workdocs:GetDocumentPath",
      "workdocs:GetDocumentVersion",
      "workmail:ListGroupMembers",
      "workmail:ListGroups",
      "workmail:ListUsers"
    ],
    "PrivEsc": [
      "codestar:AssociateTeamMember",
      "codestar:CreateProject",
      "ec2-instance-connect:SendSSHPublicKey",
      "glue:UpdateDevEndpoint",
      "iam:AddUserToGroup",
      "iam:AttachGroupPolicy",
      "iam:AttachRolePolicy",
      "iam:AttachUserPolicy",
      "iam:CreateAccessKey",
      "iam:CreateLoginProfile",
      "iam:CreatePolicyVersion",
      "iam:CreateServiceLinkedRole",
      "iam:CreateVirtualMFADevice",
      "iam:DeleteRolePermissionsBoundary",
      "iam:DeleteUserPermissionsBoundary",
      "iam:EnableMFADevice",
      "iam:PassRole",
      "iam:PutGroupPolicy",
      "iam:PutRolePermissionsBoundary",
      "iam:PutRolePolicy",
      "iam:PutUserPermissionsBoundary",
      "iam:PutUserPolicy",
      "iam:ResyncMFADevice",
      "iam:SetDefaultPolicyVersion",
      "iam:UpdateAssumeRolePolicy",
      "iam:UpdateLoginProfile",
      "kms:CreateGrant"
    ],
    "ResourceExposure": [
      "acm-pca:CreatePermission",
      "acm-pca:DeletePermission",
      "acm-pca:DeletePolicy",
      "acm-pca:PutPolicy",
      "apigateway:UpdateRestApiPolicy",
      "backup:DeleteBackupVaultAccessPolicy",
      "backup:PutBackupVaultAccessPolicy",
      "chime:DeleteVoiceConnectorTerminationCredentials",
      "chime:PutVoiceConnectorTerminationCredentials",
      "cloudformation:SetStackPolicy",
      "cloudsearch:UpdateServiceAccessPolicies",
      "codeartifact:DeleteDomainPermissionsPolicy",
      "codeartifact:DeleteRepositoryPermissionsPolicy",
      "codebuild:DeleteResourcePolicy",
      "codebuild:DeleteSourceCredentials",
      "codebuild:ImportSourceCredentials",
      "codebuild:PutResourcePolicy",
      "codeguru-profiler:PutPermission",
      "codeguru-profiler:RemovePermission",
      "codestar:AssociateTeamMember",
      "codestar:CreateProject",
      "codestar:DeleteProject",
      "codestar:DisassociateTeamMember",
      "codestar:UpdateTeamMember",
      "cognito-identity:CreateIdentityPool",
      "cognito-identity:DeleteIdentities",
      "cognito-identity:DeleteIdentityPool",
      "cognito-identity:GetId",
      "cognito-identity:MergeDeveloperIdentities",
      "cognito-identity:SetIdentityPoolRoles",
      "cognito-identity:UnlinkDeveloperIdentity",
      "cognito-identity:UnlinkIdentity",
      "cognito-identity:UpdateIdentityPool",
      "deeplens:AssociateServiceRoleToAccount",
      "ds:CreateConditionalForwarder",
      "ds:CreateDirectory",
      "ds:CreateMicrosoftAD",
      "ds:CreateTrust",
      "ds:ShareDirectory",
      "ec2:CreateNetworkInterfacePermission",
      "ec2:DeleteNetworkInterfacePermission",
      "ec2:DisableImageBlockPublicAccess",
      "ec2:ModifySnapshotAttribute",
      "ec2:ModifyVpcEndpointServicePermissions",
      "ec2:ResetSnapshotAttribute",
      "ecr:DeleteRepositoryPolicy",
      "ecr:SetRepositoryPolicy",
      "elasticfilesystem:DeleteFileSystemPolicy",
      "elasticfilesystem:PutFileSystemPolicy",
      "elasticmapreduce:PutBlockPublicAccessConfiguration",
      "es:CreateElasticsearchDomain",
      "es:UpdateElasticsearchDomainConfig",
      "glacier:AbortVaultLock",
      "glacier:CompleteVaultLock",
      "glacier:DeleteVaultAccessPolicy",
      "glacier:InitiateVaultLock",
      "glacier:SetDataRetrievalPolicy",
      "glacier:SetVaultAccessPolicy",
      "glue:DeleteResourcePolicy",
      "glue:PutResourcePolicy",
      "greengrass:AssociateServiceRoleToAccount",
      "health:DisableHealthServiceAccessForOrganization",
      "health:EnableHealthServiceAccessForOrganization",
      "iam:AddClientIDToOpenIDConnectProvider",
      "iam:AddRoleToInstanceProfile",
      "iam:AddUserToGroup",
      "iam:AttachGroupPolicy",
      "iam:AttachRolePolicy",
      "iam:AttachUserPolicy",
      "iam:ChangePassword",
      "iam:CreateAccessKey",
      "iam:CreateAccountAlias",
      "iam:CreateGroup",
      "iam:CreateInstanceProfile",
      "iam:CreateLoginProfile",
      "iam:CreateOpenIDConnectProvider",
      "iam:CreatePolicy",
      "iam:CreatePolicyVersion",
      "iam:CreateRole",
      "iam:CreateSAMLProvider",
      "iam:CreateServiceLinkedRole",
      "iam:CreateServiceSpecificCredential",
      "iam:CreateUser",
      "iam:CreateVirtualMFADevice",
      "iam:DeactivateMFADevice",
      "iam:DeleteAccessKey",
      "iam:DeleteAccountAlias",
      "iam:DeleteAccountPasswordPolicy",
      "iam:DeleteGroup",
      "iam:DeleteGroupPolicy",
      "iam:DeleteInstanceProfile",
      "iam:DeleteLoginProfile",
      "iam:DeleteOpenIDConnectProvider",
      "iam:DeletePolicy",
      "iam:DeletePolicyVersion",
      "iam:DeleteRole",
      "iam:DeleteRolePermissionsBoundary",
      "iam:DeleteRolePolicy",
      "iam:DeleteSAMLProvider",
      "iam:DeleteServerCertificate",
      "iam:DeleteServiceLinkedRole",
      "iam:DeleteServiceSpecificCredential",
      "iam:DeleteSigningCertificate",
      "iam:DeleteSSHPublicKey",
      "iam:DeleteUser",
      "iam:DeleteUserPermissionsBoundary",
      "iam:DeleteUserPolicy",
      "iam:DeleteVirtualMFADevice",
      "iam:DetachGroupPolicy",
      "iam:DetachRolePolicy",
      "iam:DetachUserPolicy",
      "iam:EnableMFADevice",
      "iam:PassRole",
      "iam:PutGroupPolicy",
      "iam:PutRolePermissionsBoundary",
      "iam:PutRolePolicy",
      "iam:PutUserPermissionsBoundary",
      "iam:PutUserPolicy",
      "iam:RemoveClientIDFromOpenIDConnectProvider",
      "iam:RemoveRoleFromInstanceProfile",
      "iam:RemoveUserFromGroup",
      "iam:ResetServiceSpecificCredential",
      "iam:ResyncMFADevice",
      "iam:SetDefaultPolicyVersion",
      "iam:SetSecurityTokenServicePreferences",
      "iam:UpdateAccessKey",
      "iam:UpdateAccountPasswordPolicy",
      "iam:UpdateAssumeRolePolicy",
      "iam:UpdateGroup",
      "iam:UpdateLoginProfile",
      "iam:UpdateOpenIDConnectProviderThumbprint",
      "iam:UpdateRole",
      "iam:UpdateRoleDescription",
      "iam:UpdateSAMLProvider",
      "iam:UpdateServerCertificate",
      "iam:UpdateServiceSpecificCredential",
      "iam:UpdateSigningCertificate",
      "iam:UpdateSSHPublicKey",
      "iam:UpdateUser",
      "iam:UploadServerCertificate",
      "iam:UploadSigningCertificate",
      "iam:UploadSSHPublicKey",
      "imagebuilder:PutComponentPolicy",
      "imagebuilder:PutImagePolicy",
      "imagebuilder:PutImageRecipePolicy",
      "iot:AttachPolicy",
      "iot:AttachPrincipalPolicy",
      "iot:DetachPolicy",
      "iot:DetachPrincipalPolicy",
      "iot:SetDefaultAuthorizer",
      "iot:SetDefaultPolicyVersion",
      "iotsitewise:CreateAccessPolicy",
      "iotsitewise:DeleteAccessPolicy",
      "iotsitewise:UpdateAccessPolicy",
      "kms:CreateGrant",
      "kms:PutKeyPolicy",
      "kms:RetireGrant",
      "kms:RevokeGrant",
      "lakeformation:BatchGrantPermissions",
      "lakeformation:BatchRevokePermissions",
      "lakeformation:GrantPermissions",
      "lakeformation:PutDataLakeSettings",
      "lakeformation:RevokePermissions",
      "lambda:AddLayerVersionPermission",
      "lambda:AddPermission",
      "lambda:DisableReplication",
      "lambda:EnableReplication",
      "lambda:RemoveLayerVersionPermission",
      "lambda:RemovePermission",
      "license-manager:UpdateServiceSettings",
      "lightsail:GetRelationalDatabaseMasterUserPassword",
      "logs:DeleteResourcePolicy",
      "logs:PutResourcePolicy",
      "mediapackage:RotateIngestEndpointCredentials",
      "mediastore:DeleteContainerPolicy",
      "mediastore:PutContainerPolicy",
      "opsworks:SetPermission",
      "opsworks:UpdateUserProfile",
      "quicksight:CreateAdmin",
      "quicksight:CreateGroup",
      "quicksight:CreateGroupMembership",
      "quicksight:CreateIAMPolicyAssignment",
      "quicksight:CreateUser",
      "quicksight:DeleteGroup",
      "quicksight:DeleteGroupMembership",
      "quicksight:DeleteIAMPolicyAssignment",
      "quicksight:DeleteUser",
      "quicksight:DeleteUserByPrincipalId",
      "quicksight:RegisterUser",
      "quicksight:UpdateDashboardPermissions",
      "quicksight:UpdateGroup",
      "quicksight:UpdateIAMPolicyAssignment",
      "quicksight:UpdateTemplatePermissions",
      "quicksight:UpdateUser",
      "ram:AcceptResourceShareInvitation",
      "ram:AssociateResourceShare",
      "ram:CreateResourceShare",
      "ram:DeleteResourceShare",
      "ram:DisassociateResourceShare",
      "ram:EnableSharingWithAwsOrganization",
      "ram:RejectResourceShareInvitation",
      "ram:UpdateResourceShare",
      "rds-db:connect",
      "rds:AuthorizeDBSecurityGroupIngress",
      "redshift:AuthorizeSnapshotAccess",
      "redshift:CreateClusterUser",
      "redshift:CreateSnapshotCopyGrant",
      "redshift:JoinGroup",
      "redshift:ModifyClusterIamRoles",
      "redshift:RevokeSnapshotAccess",
      "route53resolver:PutResolverRulePolicy",
      "s3:BypassGovernanceRetention",
      "s3:DeleteAccessPointPolicy",
      "s3:DeleteBucketPolicy",
      "s3:ObjectOwnerOverrideToBucketOwner",
      "s3:PutAccessPointPolicy",
      "s3:PutAccountPublicAccessBlock",
      "s3:PutBucketAcl",
      "s3:PutBucketPolicy",
      "s3:PutBucketPublicAccessBlock",
      "s3:PutObjectAcl",
      "s3:PutObjectVersionAcl",
      "secretsmanager:DeleteResourcePolicy",
      "secretsmanager:PutResourcePolicy",
      "secretsmanager:ValidateResourcePolicy",
      "servicecatalog:CreatePortfolioShare",
      "servicecatalog:DeletePortfolioShare",
      "sns:AddPermission",
      "sns:CreateTopic",
      "sns:RemovePermission",
      "sns:SetTopicAttributes",
      "sqs:AddPermission",
      "sqs:CreateQueue",
      "sqs:RemovePermission",
      "sqs:SetQueueAttributes",
      "ssm:ModifyDocumentPermission",
      "sso-directory:AddMemberToGroup",
      "sso-directory:CreateAlias",
      "sso-directory:CreateGroup",
      "sso-directory:CreateUser",
      "sso-directory:DeleteGroup",
      "sso-directory:DeleteUser",
      "sso-directory:DisableUser",
      "sso-directory:EnableUser",
      "sso-directory:RemoveMemberFromGroup",
      "sso-directory:UpdateGroup",
      "sso-directory:UpdatePassword",
      "sso-directory:UpdateUser",
      "sso-directory:VerifyEmail",
      "sso:AssociateDirectory",
      "sso:AssociateProfile",
      "sso:CreateApplicationInstance",
      "sso:CreateApplicationInstanceCertificate",
      "sso:CreatePermissionSet",
      "sso:CreateProfile",
      "sso:CreateTrust",
      "sso:DeleteApplicationInstance",
      "sso:DeleteApplicationInstanceCertificate",
      "sso:DeletePermissionSet",
      "sso:DeletePermissionsPolicy",
      "sso:DeleteProfile",
      "sso:DisassociateDirectory",
      "sso:DisassociateProfile",
      "sso:ImportApplicationInstanceServiceProviderMetadata",
      "sso:PutPermissionsPolicy",
      "sso:StartSSO",
      "sso:UpdateApplicationInstanceActiveCertificate",
      "sso:UpdateApplicationInstanceDisplayData",
      "sso:UpdateApplicationInstanceResponseConfiguration",
      "sso:UpdateApplicationInstanceResponseSchemaConfiguration",
      "sso:UpdateApplicationInstanceSecurityConfiguration",
      "sso:UpdateApplicationInstanceServiceProviderConfiguration",
      "sso:UpdateApplicationInstanceStatus",
      "sso:UpdateDirectoryAssociation",
      "sso:UpdatePermissionSet",
      "sso:UpdateProfile",
      "sso:UpdateSSOConfiguration",
      "sso:UpdateTrust",
      "storagegateway:DeleteChapCredentials",
      "storagegateway:SetLocalConsolePassword",
      "storagegateway:SetSMBGuestPassword",
      "storagegateway:UpdateChapCredentials",
      "waf-regional:DeletePermissionPolicy",
      "waf-regional:PutPermissionPolicy",
      "waf:DeletePermissionPolicy",
      "waf:PutPermissionPolicy",
      "wafv2:CreateWebACL",
      "wafv2:DeletePermissionPolicy",
      "wafv2:DeleteWebACL",
      "wafv2:PutPermissionPolicy",
      "wafv2:UpdateWebACL",
      "worklink:UpdateDevicePolicyConfiguration",
      "workmail:ResetPassword",
      "workmail:ResetUserPassword",
      "xray:PutEncryptionConfig"
    ]
  },
  "iam_lower": {
    "CredentialExposure": [
      "appsync:listapikeys",
      "athena:getsession",
      "chatbot:getmicrosoftteamsoauthparameters",
      "chatbot:getslackoauthparameters",
      "chime:createapikey",
      "cloud9:createenvironmentssh",
      "cloud9:createenvironmenttoken",
      "codeartifact:getauthorizationtoken",
      "codepipeline:pollforjobs",
      "cognito-identity:getcredentialsforidentity",
      "cognito-identity:getopenidtoken",
      "cognito-identity:getopenidtokenfordeveloperidentity",
      "cognito-idp:describeuserpoolclient",
      "cognito-idp:getuserattributeverificationcode",
      "connect:getfederationtoken",
      "connect:listsecuritykeys",
      "ec2:getpassworddata",
      "ec2-instance-connect:sendsshpublickey",
      "ecr-public:getauthorizationtoken",
      "ecr:getauthorizationtoken",
      "gamelift:getcomputeauthtoken",
      "gamelift:getgamesessionlogurl",
      "gamelift:getinstanceaccess",
      "gamelift:requestuploadcredentials",
      "iam:createaccesskey",
      "iam:createloginprofile",
      "iam:createservicespecificcredential",
      "iam:resetservicespecificcredential",
      "iam:updateaccesskey",
      "lightsail:downloaddefaultkeypair",
      "lightsail:getbucketaccesskeys",
      "lightsail:getkeypair",
      "lightsail:getkeypairs",
      "lightsail:getrelationaldatabasemasteruserpassword",
      "mediapackage:rotatechannelcredentials",
      "mediapackage:rotateingestendpointcredentials",
      "rds-db:connect",
      "redshift:getclustercredentials",
      "s3:getdataaccess",
      "snowball:getjobunlockcode",
      "sso-directory:listbearertokens",
      "storagegateway:describechapcredentials",
      "sts:assumerole",
      "sts:assumerolewithsaml",
      "sts:assumerolewithwebidentity",
      "sts:getfederationtoken",
      "sts:getsessiontoken",
      "waf-regional:getchangetoken",
      "waf:getchangetoken"
    ],
    "DataAccess": [
      "aoss:apiaccessall",
      "aoss:dashboardsaccessall",
      "appsync:getdatasource",
      "appsync:getfunction",
      "athena:getqueryexecution",
      "athena:getqueryresults",
      "athena:getqueryresultsstream",
      "cassandra:select",
      "chatbot:describeslackchannels",
      "chatbot:describeslackuseridentities",
      "chatbot:listmicrosoftteamsconfiguredteams",
      "chatbot:listmicrosoftteamsuseridentities",
      "chime:getattendee",
      "chime:getchannelmessage",
      "chime:getmeeting",
      "chime:getmeetingdetail",
      "chime:getroom",
      "chime:getuser",
      "chime:getuseractivityreportdata",
      "chime:getuserbyemail",
      "chime:getusersettings",
      "chime:listattendees",
      "chime:listmeetingevents",
      "chime:listmeetings",
      "chime:listusers",
      "cleanrooms:getprotectedquery",
      "cloudformation:gettemplate",
      "cloudfront:getfunction",
      "cloudtrail:getqueryresults",
      "cloudtrail:lookupevents",
      "codeartifact:getpackageversionasset",
      "codeartifact:getpackageversionreadme",
      "codeartifact:readfromrepository",
      "codebuild:batchgetreportgroups",
      "codebuild:batchgetreports",
      "codecommit:batchgetcommits",
      "codecommit:batchgetpullrequests",
      "codecommit:batchgetrepositories",
      "codecommit:describemergeconflicts",
      "codecommit:describepullrequestevents",
      "codecommit:getapprovalruletemplate",
      "codecommit:getblob",
      "codecommit:getbranch",
      "codecommit:getcomment",
      "codecommit:getcommentreactions",
      "codecommit:getcommentsforcomparedcommit",
      "codecommit:getcommentsforpullrequest",
      "codecommit:getcommit",
      "codecommit:getcommithistory",
      "codecommit:getcommitsfrommergebase",
      "codecommit:getdifferences",
      "codecommit:getfile",
      "codecommit:getfolder",
      "codecommit:getmergecommit",
      "codecommit:getmergeconflicts",
      "codecommit:getmergeoptions",
      "codecommit:getobjectidentifier",
      "codecommit:getpullrequest",
      "codecommit:getpullrequestapprovalstates",
      "codecommit:getpullrequestoverridestate",
      "codecommit:getreferences",
      "codecommit:gettree",
      "codecommit:gitpull",
      "codeguru-profiler:getrecommendations",
      "codeguru-reviewer:describecodereview",
      "codeguru-reviewer:describerecommendationfeedback",
      "codepipeline:getpipelineexecution",
      "cognito-identity:lookupdeveloperidentity",
      "cognito-idp:admingetdevice",
      "cognito-idp:admingetuser",
      "cognito-idp:adminlistdevices",
      "cognito-idp:adminlistgroupsforuser",
      "cognito-idp:adminlistuserauthevents",
      "cognito-idp:getdevice",
      "cognito-idp:getgroup",
      "cognito-idp:getuser",
      "cognito-idp:listusers",
      "cognito-idp:listdevices",
      "cognito-idp:listgroups",
      "cognito-sync:listrecords",
      "cognito-sync:queryrecords",
      "connect:listusers",
      "datapipeline:queryobjects",
      "dax:batchgetitem",
      "dax:getitem",
      "dax:query",
      "dax:scan",
      "dynamodb:batchgetitem",
      "dynamodb:getitem",
      "dynamodb:getrecords",
      "dynamodb:query",
      "dynamodb:scan",
      "ecr:getdownloadurlforlayer",
      "es:eshttpdelete",
      "es:eshttpget",
      "es:eshttphead",
      "es:eshttppatch",
      "es:eshttppost",
      "es:eshttpput",
      "gamelift:getinstanceaccess",
      "healthlake:readresource",
      "healthlake:searchwithget",
      "healthlake:searchwithpost",
      "kendra:query",
      "kinesis:getrecords",
      "kinesisvideo:getimages",
      "kinesisvideo:getmedia",
      "kms:creategrant",
      "lambda:getfunction",
      "lambda:getlayerversion",
      "lightsail:getcontainerimages",
      "logs:getlogevents",
      "logs:getlogrecord",
      "logs:getqueryresults",
      "logs:unmask",
      "macie2:getfindings",
      "mediastore:getobject",
      "qldb:getblock",
      "rds:downloadcompletedblogfile",
      "rds:downloaddblogfileportion",
      "robomaker:getworldtemplatebody",
      "s3-object-lambda:getobject",
      "s3-object-lambda:getobjectversion",
      "s3-object-lambda:listbucket",
      "s3:getobject",
      "s3:getobjectversion",
      "sagemaker:search",
      "sdb:select",
      "serverlessrepo:getapplication",
      "serverlessrepo:getcloudformationtemplate",
      "sqs:receivemessage",
      "ssm:getdocument",
      "ssm:getparameter",
      "ssm:getparameterhistory",
      "ssm:getparameters",
      "ssm:getparametersbypath",
      "sso-directory:describegroup",
      "sso-directory:describeuser",
      "sso-directory:searchgroups",
      "sso-directory:searchusers",
      "sso:searchgroups",
      "sso:searchusers",
      "support:describeattachment",
      "support:describecommunications",
      "wafv2:getsampledrequests",
      "workdocs:getdocument",
      "workdocs:getdocumentpath",
      "workdocs:getdocumentversion",
      "workmail:listgroupmembers",
      "workmail:listgroups",
      "workmail:listusers"
    ],
    "PrivEsc": [
      "codestar:associateteammember",
      "codestar:createproject",
      "ec2-instance-connect:sendsshpublickey",
      "glue:updatedevendpoint",
      "iam:addusertogroup",
      "iam:attachgrouppolicy",
      "iam:attachrolepolicy",
      "iam:attachuserpolicy",
      "iam:createaccesskey",
      "iam:createloginprofile",
      "iam:createpolicyversion",
      "iam:createservicelinkedrole",
      "iam:createvirtualmfadevice",
      "iam:deleterolepermissionsboundary",
      "iam:deleteuserpermissionsboundary",
      "iam:enablemfadevice",
      "iam:passrole",
      "iam:putgrouppolicy",
      "iam:putrolepermissionsboundary",
      "iam:putrolepolicy",
      "iam:putuserpermissionsboundary",
      "iam:putuserpolicy",
      "iam:resyncmfadevice",
      "iam:setdefaultpolicyversion",
      "iam:updateassumerolepolicy",
      "iam:updateloginprofile",
      "kms:creategrant"
    ],
    "ResourceExposure": [
      "acm-pca:createpermission",
      "acm-pca:deletepermission",
      "acm-pca:deletepolicy",
      "acm-pca:putpolicy",
      "apigateway:updaterestapipolicy",
      "backup:deletebackupvaultaccesspolicy",
      "backup:putbackupvaultaccesspolicy",
      "chime:deletevoiceconnectorterminationcredentials",
      "chime:putvoiceconnectorterminationcredentials",
      "cloudformation:setstackpolicy",
      "cloudsearch:updateserviceaccesspolicies",
      "codeartifact:deletedomainpermissionspolicy",
      "codeartifact:deleterepositorypermissionspolicy",
      "codebuild:deleteresourcepolicy",
      "codebuild:deletesourcecredentials",
      "codebuild:importsourcecredentials",
      "codebuild:putresourcepolicy",
      "codeguru-profiler:putpermission",
      "codeguru-profiler:removepermission",
      "codestar:associateteammember",
      "codestar:createproject",
      "codestar:deleteproject",
      "codestar:disassociateteammember",
      "codestar:updateteammember",
      "cognito-identity:createidentitypool",
      "cognito-identity:deleteidentities",
      "cognito-identity:deleteidentitypool",
      "cognito-identity:getid",
      "cognito-identity:mergedeveloperidentities",
      "cognito-identity:setidentitypoolroles",
      "cognito-identity:unlinkdeveloperidentity",
      "cognito-identity:unlinkidentity",
      "cognito-identity:updateidentitypool",
      "deeplens:associateserviceroletoaccount",
      "ds:createconditionalforwarder",
      "ds:createdirectory",
      "ds:createmicrosoftad",
      "ds:createtrust",
      "ds:sharedirectory",
      "ec2:createnetworkinterfacepermission",
      "ec2:deletenetworkinterfacepermission",
      "ec2:disableimageblockpublicaccess",
      "ec2:modifysnapshotattribute",
      "ec2:modifyvpcendpointservicepermissions",
      "ec2:resetsnapshotattribute",
      "ecr:deleterepositorypolicy",
      "ecr:setrepositorypolicy",
      "elasticfilesystem:deletefilesystempolicy",
      "elasticfilesystem:putfilesystempolicy",
      "elasticmapreduce:putblockpublicaccessconfiguration",
      "es:createelasticsearchdomain",
      "es:updateelasticsearchdomainconfig",
      "glacier:abortvaultlock",
      "glacier:completevaultlock",
      "glacier:deletevaultaccesspolicy",
      "glacier:initiatevaultlock",
      "glacier:setdataretrievalpolicy",
      "glacier:setvaultaccesspolicy",
      "glue:deleteresourcepolicy",
      "glue:putresourcepolicy",
      "greengrass:associateserviceroletoaccount",
      "health:disablehealthserviceaccessfororganization",
      "health:enablehealthserviceaccessfororganization",
      "iam:addclientidtoopenidconnectprovider",
      "iam:addroletoinstanceprofile",
      "iam:addusertogroup",
      "iam:attachgrouppolicy",
      "iam:attachrolepolicy",
      "iam:attachuserpolicy",
      "iam:changepassword",
      "iam:createaccesskey",
      "iam:createaccountalias",
      "iam:creategroup",
      "iam:createinstanceprofile",
      "iam:createloginprofile",
      "iam:createopenidconnectprovider",
      "iam:createpolicy",
      "iam:createpolicyversion",
      "iam:createrole",
      "iam:createsamlprovider",
      "iam:createservicelinkedrole",
      "iam:createservicespecificcredential",
      "iam:createuser",
      "iam:createvirtualmfadevice",
      "iam:deactivatemfadevice",
      "iam:deleteaccesskey",
      "iam:deleteaccountalias",
      "iam:deleteaccountpasswordpolicy",
      "iam:deletegroup",
      "iam:deletegrouppolicy",
      "iam:deleteinstanceprofile",
      "iam:deleteloginprofile",
      "iam:deleteopenidconnectprovider",
      "iam:deletepolicy",
      "iam:deletepolicyversion",
      "iam:deleterole",
      "iam:deleterolepermissionsboundary",
      "iam:deleterolepolicy",
      "iam:deletesamlprovider",
      "iam:deleteservercertificate",
      "iam:deleteservicelinkedrole",
      "iam:deleteservicespecificcredential",
      "iam:deletesigningcertificate",
      "iam:deletesshpublickey",
      "iam:deleteuser",
      "iam:deleteuserpermissionsboundary",
      "iam:deleteuserpolicy",
      "iam:deletevirtualmfadevice",
      "iam:detachgrouppolicy",
      "iam:detachrolepolicy",
      "iam:detachuserpolicy",
      "iam:enablemfadevice",
      "iam:passrole",
      "iam:putgrouppolicy",
      "iam:putrolepermissionsboundary",
      "iam:putrolepolicy",
      "iam:putuserpermissionsboundary",
      "iam:putuserpolicy",
      "iam:removeclientidfromopenidconnectprovider",
      "iam:removerolefrominstanceprofile",
      "iam:removeuserfromgroup",
      "iam:resetservicespecificcredential",
      "iam:resyncmfadevice",
      "iam:setdefaultpolicyversion",
      "iam:setsecuritytokenservicepreferences",
      "iam:updateaccesskey",
      "iam:updateaccountpasswordpolicy",
      "iam:updateassumerolepolicy",
      "iam:updategroup",
      "iam:updateloginprofile",
      "iam:updateopenidconnectproviderthumbprint",
      "iam:updaterole",
      "iam:updateroledescription",
      "iam:updatesamlprovider",
      "iam:updateservercertificate",
      "iam:updateservicespecificcredential",
      "iam:updatesigningcertificate",
      "iam:updatesshpublickey",
      "iam:updateuser",
      "iam:uploadservercertificate",
      "iam:uploadsigningcertificate",
      "iam:uploadsshpublickey",
      "imagebuilder:putcomponentpolicy",
      "imagebuilder:putimagepolicy",
      "imagebuilder:putimagerecipepolicy",
      "iot:attachpolicy",
      "iot:attachprincipalpolicy",
      "iot:detachpolicy",
      "iot:detachprincipalpolicy",
      "iot:setdefaultauthorizer",
      "iot:setdefaultpolicyversion",
      "iotsitewise:createaccesspolicy",
      "iotsitewise:deleteaccesspolicy",
      "iotsitewise:updateaccesspolicy",
      "kms:creategrant",
      "kms:putkeypolicy",
      "kms:retiregrant",
      "kms:revokegrant",
      "lakeformation:batchgrantpermissions",
      "lakeformation:batchrevokepermissions",
      "lakeformation:grantpermissions",
      "lakeformation:putdatalakesettings",
      "lakeformation:revokepermissions",
      "lambda:addlayerversionpermission",
      "lambda:addpermission",
      "lambda:disablereplication",
      "lambda:enablereplication",
      "lambda:removelayerversionpermission",
      "lambda:removepermission",
      "license-manager:updateservicesettings",
      "lightsail:getrelationaldatabasemasteruserpassword",
      "logs:deleteresourcepolicy",
      "logs:putresourcepolicy",
      "mediapackage:rotateingestendpointcredentials",
      "mediastore:deletecontainerpolicy",
      "mediastore:putcontainerpolicy",
      "opsworks:setpermission",
      "opsworks:updateuserprofile",
      "quicksight:createadmin",
      "quicksight:creategroup",
      "quicksight:creategroupmembership",
      "quicksight:createiampolicyassignment",
      "quicksight:createuser",
      "quicksight:deletegroup",
      "quicksight:deletegroupmembership",
      "quicksight:deleteiampolicyassignment",
      "quicksight:deleteuser",
      "quicksight:deleteuserbyprincipalid",
      "quicksight:registeruser",
      "quicksight:updatedashboardpermissions",
      "quicksight:updategroup",
      "quicksight:updateiampolicyassignment",
      "quicksight:updatetemplatepermissions",
      "quicksight:updateuser",
      "ram:acceptresourceshareinvitation",
      "ram:associateresourceshare",
      "ram:createresourceshare",
      "ram:deleteresourceshare",
      "ram:disassociateresourceshare",
      "ram:enablesharingwithawsorganization",
      "ram:rejectresourceshareinvitation",
      "ram:updateresourceshare",
      "rds-db:connect",
      "rds:authorizedbsecuritygroupingress",
      "redshift:authorizesnapshotaccess",
      "redshift:createclusteruser",
      "redshift:createsnapshotcopygrant",
      "redshift:joingroup",
      "redshift:modifyclusteriamroles",
      "redshift:revokesnapshotaccess",
      "route53resolver:putresolverrulepolicy",
      "s3:bypassgovernanceretention",
      "s3:deleteaccesspointpolicy",
      "s3:deletebucketpolicy",
      "s3:objectowneroverridetobucketowner",
      "s3:putaccesspointpolicy",
      "s3:putaccountpublicaccessblock",
      "s3:putbucketacl",
      "s3:putbucketpolicy",
      "s3:putbucketpublicaccessblock",
      "s3:putobjectacl",
      "s3:putobjectversionacl",
      "secretsmanager:deleteresourcepolicy",
      "secretsmanager:putresourcepolicy",
      "secretsmanager:validateresourcepolicy",
      "servicecatalog:createportfolioshare",
      "servicecatalog:deleteportfolioshare",
      "sns:addpermission",
      "sns:createtopic",
      "sns:removepermission",
      "sns:settopicattributes",
      "sqs:addpermission",
      "sqs:createqueue",
      "sqs:removepermission",
      "sqs:setqueueattributes",
      "ssm:modifydocumentpermission",
      "sso-directory:addmembertogroup",
      "sso-directory:createalias",
      "sso-directory:creategroup",
      "sso-directory:createuser",
      "sso-directory:deletegroup",
      "sso-directory:deleteuser",
      "sso-directory:disableuser",
      "sso-directory:enableuser",
      "sso-directory:removememberfromgroup",
      "sso-directory:updategroup",
      "sso-directory:updatepassword",
      "sso-directory:updateuser",
      "sso-directory:verifyemail",
      "sso:associatedirectory",
      "sso:associateprofile",
      "sso:createapplicationinstance",
      "sso:createapplicationinstancecertificate",
      "sso:createpermissionset",
      "sso:createprofile",
      "sso:createtrust",
      "sso:deleteapplicationinstance",
      "sso:deleteapplicationinstancecertificate",
      "sso:deletepermissionset",
      "sso:deletepermissionspolicy",
      "sso:deleteprofile",
      "sso:disassociatedirectory",
      "sso:disassociateprofile",
      "sso:importapplicationinstanceserviceprovidermetadata",
      "sso:putpermissionspolicy",
      "sso:startsso",
      "sso:updateapplicationinstanceactivecertificate",
      "sso:updateapplicationinstancedisplaydata",
      "sso:updateapplicationinstanceresponseconfiguration",
      "sso:updateapplicationinstanceresponseschemaconfiguration",
      "sso:updateapplicationinstancesecurityconfiguration",
      "sso:updateapplicationinstanceserviceproviderconfiguration",
      "sso:updateapplicationinstancestatus",
      "sso:updatedirectoryassociation",
      "sso:updatepermissionset",
      "sso:updateprofile",
      "sso:updatessoconfiguration",
      "sso:updatetrust",
      "storagegateway:deletechapcredentials",
      "storagegateway:setlocalconsolepassword",
      "storagegateway:setsmbguestpassword",
      "storagegateway:updatechapcredentials",
      "waf-regional:deletepermissionpolicy",
      "waf-regional:putpermissionpolicy",
      "waf:deletepermissionpolicy",
      "waf:putpermissionpolicy",
      "wafv2:createwebacl",
      "wafv2:deletepermissionpolicy",
      "wafv2:deletewebacl",
      "wafv2:putpermissionpolicy",
      "wafv2:updatewebacl",
      "worklink:updatedevicepolicyconfiguration",
      "workmail:resetpassword",
      "workmail:resetuserpassword",
      "xray:putencryptionconfig"
    ]
  }
}